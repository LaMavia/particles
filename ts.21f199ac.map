{"version":3,"sources":["ts/vector.ts","ts/particle.ts","ts/index.ts"],"names":[],"mappings":"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","file":"ts.21f199ac.map","sourceRoot":"src","sourcesContent":["export class Vector {\r\n  h: number\r\n  v: number\r\n\r\n  constructor(horizontal: number, vertical: number) {\r\n    this.h = horizontal\r\n    this.v = vertical\r\n  }\r\n\r\n  get horizontal() {\r\n    return this.h\r\n  }\r\n\r\n  get vertical() {\r\n    return this.v\r\n  }\r\n\r\n  get array() {\r\n    return [this.h, this.v]\r\n  }\r\n\r\n  dist([x2, y2]: number[]) {\r\n    const [x1, y1] = this.array\r\n    const xl = x1 - x2\r\n    const yl = y1 - y2\r\n    return Math.sqrt(xl**2 + yl**2)\r\n  }\r\n\r\n  static dist([x1, y1]: number[], [x2, y2]: number[]) {\r\n    const xl = x1 + x2\r\n    const yl = y1 + y2\r\n    return Math.sqrt(xl**2 + yl**2)\r\n  }\r\n\r\n  add(array: number[]) {\r\n    this.h += array[0]\r\n    this.v += array[1]\r\n    \r\n    return this\r\n  }\r\n\r\n  scale(n: number) {\r\n    this.h *= n\r\n    this.v *= n\r\n\r\n    return this\r\n  }\r\n\r\n  mult([h, v]: number[]) {\r\n    this.h *= h\r\n    this.v *= v\r\n\r\n    return this\r\n  }\r\n\r\n  static negV(v: Vector) {\r\n    return new Vector(-v.horizontal, -v.vertical)\r\n  }\r\n\r\n  static negA(v: number[]) {\r\n    return v.map(x => x*-1)\r\n  }\r\n\r\n  static AddA(...xs) {\r\n    const a = xs.reduce((s, x) => [s[0]+x[0], s[1]+x[1]], [0, 0])\r\n    return new Vector(a[0], a[1])\r\n  }\r\n}","import { Vector } from \"./vector\";\r\n\r\nexport class Particle { \r\n  pos: Vector\r\n  m: number\r\n  r: number\r\n  v: Vector\r\n  a: Vector\r\n  ctx: CanvasRenderingContext2D\r\n  id: string\r\n  added: boolean\r\n  constructor(position: Vector, mass: number, a0: Vector, v0: Vector, ctx: CanvasRenderingContext2D, added: boolean = false, r: number = mass) {\r\n    this.pos = position\r\n    this.m = mass\r\n    this.r = r\r\n    this.a = a0\r\n    this.v = v0\r\n\r\n    this.ctx = ctx\r\n    this.id = (Math.random() * 10**12).toString(16)\r\n    this.added = added\r\n  }\r\n\r\n  applyForce(f: number[], dt: number) {\r\n    dt = dt/1000\r\n    const a = f.map(x => x/this.m)\r\n    this.a.add(a)\r\n    \r\n    const v = this.a.array.map(x => x*dt)\r\n    this.v.add(v)\r\n    \r\n    this.pos.add(this.v.array.map(x => x*dt))\r\n  }\r\n\r\n  update(state: {particles: Particle[]}, dt: number) { \r\n    let abort = false\r\n    const others = state.particles.filter(x => x.id !== this.id)\r\n    const Fw = others.reduce((f, p) => {\r\n      if(abort) return f\r\n      const [x, y] = Particle.calcForce(this, p)\r\n      const d = p.pos.dist(this.pos.array)\r\n      if(d < this.r + p.r) {\r\n        const mom1 = this.v.scale(this.m)\r\n        const mom2 = p.v.scale(p.m)\r\n        const nv = (mom1.add(mom2.array).scale(1/(this.m+p.m)))\r\n\r\n        const np = new Particle(\r\n          this.pos,\r\n          this.m + p.m,\r\n          new Vector(0, 0),\r\n          new Vector(0, 0),\r\n          this.ctx,\r\n          false,\r\n          (Math.sqrt(this.r**2 + p.r**2))\r\n        )\r\n        console.log(np)\r\n        state.particles.push(np)\r\n        state.particles = state.particles\r\n          .filter(x => !(x.id === this.id || x.id === p.id))\r\n        \r\n        abort = true\r\n        return f\r\n      }\r\n      return [\r\n        f[0] + x,\r\n        f[1] + y\r\n      ]\r\n    }, [0, 0])\r\n\r\n    \r\n\r\n    // if(abort) return\r\n    // if(this.added) console.table(Fw)\r\n\r\n    this.applyForce(Fw, dt)\r\n    \r\n    // Wall hit detection\r\n    const hitScalar = 0.8\r\n    if(this.pos.h + this.r > this.ctx.canvas.width ||\r\n      this.pos.h - this.r <= 0 ) {\r\n        this.v.mult([-hitScalar, hitScalar])\r\n        this.a.mult([-hitScalar, hitScalar])\r\n      }\r\n\r\n    if(this.pos.v + this.r > this.ctx.canvas.height ||\r\n      this.pos.v - this.r <= 0 ) {\r\n        this.v.mult([hitScalar, -hitScalar])\r\n        this.a.mult([hitScalar, -hitScalar])\r\n      }\r\n  }\r\n\r\n  draw(ctx: CanvasRenderingContext2D) {\r\n\r\n    ctx.beginPath()\r\n    ctx.arc(this.pos.h, this.pos.v, this.r, 0, Math.PI*2)\r\n    if(this.added) ctx.fillStyle = 'red'\r\n    else ctx.fillStyle = 'white'\r\n    ctx.fill()\r\n    ctx.closePath()\r\n\r\n  }\r\n\r\n  static calcDist(p1: Particle, p2: Particle) {\r\n    const s = Math.sign(p1.pos.h - p2.pos.h) * \r\n      Math.sign(p1.pos.v - p2.pos.v)\r\n    return s * p1.pos.dist(p2.pos.array)\r\n  }\r\n\r\n  /**\r\n   * Returns an array of angles [p1, p2]\r\n   */\r\n  static calcAngle(p1: Particle, p2: Particle) {\r\n    const h = Math.abs(p1.pos.h - p2.pos.h) \r\n    const v = Math.abs(p1.pos.v - p2.pos.v)\r\n\r\n    return Math.atan(v/h)\r\n  }\r\n\r\n  static calcRatio(p1: Particle, p2: Particle) {\r\n    const b = Math.abs(p1.pos.h - p2.pos.h) || 1\r\n    const a = Math.abs(p1.pos.v - p2.pos.v) || 1\r\n    return [a/b, b/a]\r\n  }\r\n\r\n  /**\r\n   * Returns an array of forces [horizonal, vertical] with which particles work on each other\r\n   * @param p1 {Particle}\r\n   * @param p2 {Particle}\r\n   */\r\n  static calcForce(p1: Particle, p2: Particle): number[] {\r\n    function formula(M: number, m: number, r: number) {\r\n      return G*M*m/(r**2)\r\n    }\r\n    const G = 6.67 * (10**-5);\r\n    const d = Particle.calcDist(p1, p2)\r\n    const f = formula(p1.m, p2.m, d)\r\n    const th = Particle.calcAngle(p1 ,p2)\r\n    return [\r\n      -(Math.sign(p1.pos.h - p2.pos.h))*f*Math.cos(th),\r\n      -(Math.sign(p1.pos.v - p2.pos.v))*f*Math.sin(th),\r\n    ]\r\n  }\r\n}","import { Particle } from \"./particle\";\r\nimport { Vector } from \"./vector\";\r\ninterface S {\r\n  particles: Particle[]\r\n}\r\n(() => {\r\n  const ctx = (document.getElementById('canvas') as HTMLCanvasElement).getContext(\"2d\")\r\n  const state = {\r\n    particles: [] as Particle[]\r\n  }\r\n   \r\n  const fr = 1000/60\r\n  let k = 1\r\n  let x = 0, y = 0\r\n\r\n  function rand(max: number, min: number) {\r\n    return Math.random() * (max - min) + min\r\n  }\r\n\r\n  function handleClick(e: MouseEvent) {\r\n    state.particles.push(new Particle(\r\n      new Vector(e.clientX/k, e.clientY/k),\r\n      10**11,\r\n      new Vector(0, 0),\r\n      new Vector(0, 0),\r\n      ctx,\r\n      true,\r\n      5\r\n    ))\r\n  }\r\n\r\n  function handleKey(e: KeyboardEvent) {\r\n    switch(e.keyCode) {\r\n      case 107: k = 2;break;\r\n      case 109: k = 1;break;\r\n      case 83: console.log(state);break;\r\n      default:;break;\r\n    }\r\n  }\r\n\r\n  function setup() {\r\n    ctx.canvas.width = window.innerWidth\r\n    ctx.canvas.height = window.innerHeight\r\n    ctx.canvas.addEventListener('click', handleClick, {passive: true})\r\n    window.addEventListener('keyup', handleKey, {passive: true})\r\n    // ctx.canvas.addEventListener('mousemove', e => {\r\n    //   x = ctx.canvas.width-e.clientX*1.3\r\n    //   y = ctx.canvas.width-e.clientY*1.3\r\n    // })\r\n\r\n    const v = 3, a = 4 \r\n\r\n    for(let i = 0; i < 200; i++) {\r\n      state.particles.push(new Particle(\r\n        new Vector(rand(ctx.canvas.width, 1), rand(ctx.canvas.height, 1)), \r\n        10**3,\r\n        new Vector(0, 0),\r\n        new Vector(0, 0),\r\n        ctx,\r\n        false,\r\n        1\r\n      ))\r\n    }\r\n \r\n    setTimeout(loop, fr)\r\n  }\r\n\r\n  function loop() {\r\n    ctx.clearRect(0, 0, ctx.canvas.width, ctx.canvas.height)\r\n    state.particles.forEach(p => {\r\n      ctx.save()\r\n      ctx.translate(x,y)\r\n      ctx.scale(k,k)\r\n      // console.log(particles.length)\r\n      // @ts-ignore\r\n      p.update(state, fr)\r\n      p.draw(ctx)\r\n      ctx.restore()\r\n    })\r\n    \r\n    setTimeout(loop, fr)\r\n  }\r\n\r\n\r\n  setup()\r\n})()"]}